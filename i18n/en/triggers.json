{
	"triggers": {
		"header": "Execute custom actions based on {COUNT} event types",
		"add_actionBt": "Add action",
		"create_chat_cmdBt": "Create chat command",
		"create_scheduleBt": "Add scheduled action",
		"testBt": "Test trigger",
		"deleteBt": "Delete trigger",
		"resyncBt": "Resync OBS sources",
		"resyncBt_tt": "If you changed something<br>on OBS, click this to see it<br>listed on OBS actions",
		"delete_confirm": "Delete trigger?",
		"delete_action_confirm": "Delete action?",
		"reorder_tt": "Reorder",
		"noChannelPoints_tt": "You are not a Twitch affiliate<br>or you have refused Twitchat<br>to control this",
		"noTrigger": "- no entry -",
		"create_counterBt": "Create counters",
		"queue_info": "To make sure some triggers execute one after another, associate them to the same execution queue.",
		"queue_input_placeholder": "execution queue...",
		"music": {
			"require": "These triggers need you to connect with Spotify under the {URL}",
			"require_url": "overlays section"
		},
		"obs": {
			"require": "These triggers need you to {URL}",
			"require_url": "connect with OBS"
		},
		"count": {
			"require": "These triggers need you to first {URL}",
			"require_url": "create counters"
		},
		"schedule": {
			"conflict": "A schedule with this name already exists",
			"params_title": "Parameters",
			"repeat": "Repeat:",
			"add_dateBt": "Add date",
			"default_action": "Select an action...",
			"param_name": "Schedule name",
			"param_daily": "Daily",
			"param_yearly": "Yearly",
			"param_action": "Schedule type",
			"param_repeatDurationCondition": "Time based repeat",
			"param_repeatDurationValue": "Execute every {'{'}VALUE{'}'} minutes",
			"param_repeatMessageCondition": "Message based repeat",
			"param_repeatMessageValue": "Must receive at least {'{'}VALUE{'}'} message"
		},
		"actions": {
			"common": {
				"select_action":"Select the action type to execute",
				"duplicate_tt": "Duplicate",
				"next_delay": "Delay before next step (seconds)",
				"delete": "Delete",
				"dynamic_placeholder_info":"This action allows you to create a custom placeholder that you can use on subsequent actions.",
				"dynamic_trigger":"Execute a random trigger amgonst the selected ones",
				"action_chat": "Send chat message",
				"action_bingo": "Start a bingo",
				"action_raffle": "Start a raffle",
				"action_raffle_enter": "Enter raffle",
				"action_highlight": "Highlight on stream",
				"action_trigger": "Trigger",
				"action_obs": "Control OBS",
				"action_obs_tt": "You need to connect with OBS<br>on the <strong>Connexions</strong> section",
				"action_tts": "Text to speech",
				"action_tts_tt": "This needs the <strong>text to speech</strong><br>feature to be enabled",
				"action_music": "Control Spotify",
				"action_music_tt": "You need to<br>connect Spotify<br>on the <strong>Connexions</strong> section",
				"action_voicemod": "Control Voicemod",
				"action_voicemod_tt": "You need to connect<br>with Voicemod",
				"action_http": "HTTP call",
				"action_ws": "Websocket message",
				"action_poll": "Start poll",
				"action_prediction": "Start prediction",
				"action_count": "Update a counter",
				"action_countget": "Get a counter value",
				"action_random": "Random value",
				"action_stream_infos": "Set stream infos"
			},
			"chat": {
				"loop": "The message starts with the actual command name, this will lead to infinite message loop!",
				"param_message": "Message to send on your chat",
				"conflict": "A command with this name already exists",
				"allowed_users": "Users allowed to use this command",
				"params_title": "Parameters",
				"param_cmd": "Command",
				"param_globalCD": "Global cooldown (sec)",
				"param_userCD": "User cooldown (sec)",
				"param_alertCD": "Tell users if they're cooled down",
				"tip_title":"TIP :",
				"tip":"{TITLE} You can use chat commands",
				"tip_example_title":"Example:",
				"tip_example":"{TITLE} {CMD} will set your chat in 30 minutes followers only",
				"commands_list":"Usable commands"
			},
			"highlight": {
				"header": "You need to configure the {LINK} to use this action.",
				"header_link": "Message highlight overlay",
				"param_visibility": "Highlight visibility",
				"param_message": "Message to display"
			},
			"music": {
				"header": "This feature needs you to connect with Spotify under the {LINK}",
				"header_link": "overlays section",
				"param_actions": "Action",
				"param_actions_default": "Select an action...",
				"param_track": "Track to add (name or URL)",
				"param_confirmSongRequest": "Send confirmation message",
				"param_playlist": "Playlist (name, link or ID)",
				"spotify_only": "Only works with Spotify"
			},
			"obs": {
				"header": "This feature needs you to {LINK}",
				"header_link": "connect with OBS",
				"media_source": "If using a placeholder on the Media file path, folder navigation chars like {CMD1} and {CMD2} will be removed for security reasons.",
				"media_source_example": ": if setting this as the path {PATH1}, users won't be able to send {PATH2}",
				"param_action": "Action",
				"param_show_filter": "Filter visibility",
				"param_source": "OBS Source",
				"param_filter": "Source filter",
				"param_filter_none": "- none -",
				"param_text": "Text to write on source",
				"param_url": "Browser URL",
				"param_media": "Media file (optionel)",
				"param_media_img": "Image file",
				"param_action_show": "Enable source",
				"param_action_hide": "Disable source",
				"param_action_replay": "Restart playback"
			},
			"trigger": {
				"beta": "This is a beta feature!{BR} If you experience any unexpected behavior with it please {LINK}",
				"beta_link": "let me know on Discord",
				"warning_title": "Important warning",
				"warning": "Placeholders may not be available on the selected trigger.",
				"warning_example": ": If you execute a <strong>Chat command</strong> trigger from a <strong>Scheduled action</strong> trigger, the {'{'}USER{'}'} and {'{'}MESSAGE{'}'} placeholders won't be available as it won't be executed from an actual chat message.",
				"no_trigger": "You don't have any existing trigger yet",
				"select": "Select a trigger to execute...",
				"loop": "Dependency loop detected",
				"loop_delails": "This may make twitchat unstable."
			},
			"tts": {
				"header": "This feature needs you to enable {LINK} feature",
				"header_link": "text to speech",
				"param_message": "Message to read with text to speech"
			},
			"voicemod": {
				"header": "This feature needs you to {LINK}",
				"header_link": "connect with Voicemod",
				"param_voice": "Voice"
			},
			"http_ws": {
				"url": "URL to call",
				"method": "Method",
				"topic_placeholder":"custom value...",
				"select_param": "Select parameters to send:",
				"protocol_error": "Due to browser security restrictions, only 127.0.0.1 or localhost domains can ben called with HTTP protocol. Use HTTPS for other domains."
			},
			"count": {
				"value_label":"Value to add or remove",
				"select_label":"Counters to update",
				"select_placeholder":"Select a counter..."
			},
			"countget": {
				"placeholder_label":"Placeholder name",
				"select_label":"Counter to fetch",
				"example":"Use {PLACEHOLDER} key in any field of the actions after this one to get the counter's value."
			},
			"random":{
				"min_label":"Min value (included)",
				"max_label":"Max value (included)",
				"float_label":"Allow for float numbers",
				"example":"Use {PLACEHOLDER} key in any field of the actions after this one to get the random value.",
				"number":"Number",
				"list":"List",
				"trigger":"Triggers",
				"list_label":"Pick a random entry amongst these ones:",
				"list_entry_placeholder":"add entry..."
			},
			"raffle_enter":{
				"info":"The user triggering the current event will enter any currently running raffle. It will do nothing if no raffle has been created first."
			}
		},
		"categories": {
			"global": "Chat - Channel points",
			"user": "User event",
			"subits": "Sub & bits",
			"mod": "Moderation actions",
			"twitchat": "Twitchat",
			"hypetrain": "Hype train",
			"games": "Games",
			"music": "Music",
			"timer": "Temporal events",
			"obs": "OBS",
			"misc": "Miscellaneous",
			"count": "Counters"
		},
		"placeholders": {
			"user": "User name",
			"user_id": "User ID",
			"user_avatar": "User avatar URL",
			"chatter": "Chatter name",
			"message": "Message content",
			"pinned_by": "User who pinned the mesage",
			"pinned_by_id": "ID of the user who pinned the mesage",
			"poll_title": "Poll title",
			"poll_win": "Winning choice title",
			"prediction_title": "Prediction title",
			"prediction_win": "Winning choice title",
			"winner": "Winner name",
			"sub_tier": "Sub tier 1, 2 or 3",
			"sub_message": "Message of the user",
			"sub_months_total": "Total months subscribed",
			"sub_months_prepaid": "Prepaid months",
			"sub_months_streak": "Streak months",
			"sub_gifter": "Sub gifter user name",
			"sub_gift_recipient": "Recipients user names",
			"sub_gift_recipient_id": "Recipients user IDs",
			"sub_gift_count": "Subgifts count",
			"bits": "Number of bits",
			"stream_title": "Stream title",
			"stream_category": "Stream category",
			"viewers": "Viewers count",
			"reward_title": "Reward name",
			"reward_description": "Reward description",
			"reward_cost": "Reward cost",
			"reward_message": "User message if any",
			"track_artist": "Current track artist name",
			"track_title": "Current track's title",
			"track_album": "Current track's album name",
			"track_cover": "Current track's cover",
			"track_url": "Current track URL",
			"train_level": "Current level",
			"train_percent": "Current level progression (0 -> 100)",
			"train_end_level": "Level reached",
			"train_end_percent": "Percent reached",
			"voicemod_voice": "Voice's ID",
			"timeout": "Timeout duration in seconds",
			"start_date": "Formated start date",
			"timer_duration": "Formated timer's final duration",
			"countdown_duration": "Formated countdown's duration",
			"countdown_end_date": "Formated end date",
			"challenge_title": "Challenge title",
			"challenge_description": "Challenge description",
			"challenge_goal": "Challenge goal",
			"challenge_current": "Challenge current progress",
			"challenge_contribution": "User contribution",
			"challenge_contribution_total": "User total contribution",
			"shoutout_in": "User that gave you a shoutout",
			"shoutout_out": "User you gave a shoutout to",
			"counter_name": "Name of the counter",
			"counter_value": "New counter's value",
			"counter_update": "Value added",
			"counter_username": "User name (for user specific counters)",
			"counter_userid": "User ID (for user specific counters)"
		},
		"events": {
			"CHAT_COMMAND": {
				"label": "Chat command",
				"description": "Execute actions when sending a command on your chat"
			},
			"ANY_MESSAGE": {
				"label": "Any message",
				"description": "Execute actions everytime a message is received on chat"
			},
			"REWARD_REDEEM": {
				"label": "Channel point reward",
				"description": "Execute actions when the following channel point reward is redeemed<br><mark>{'{'}SUB_ITEM_NAME{'}'}</mark>"
			},
			"COMMUNITY_CHALLENGE_PROGRESS": {
				"label": "Community challenge progress",
				"description": "Execute actions when a user contributes to a community challenge"
			},
			"COMMUNITY_CHALLENGE_COMPLETE": {
				"label": "Community challenge complete",
				"description": "Execute actions when a community challenge completes"
			},
			"STREAM_INFO_UPDATE": {
				"label": "Stream info update",
				"description": "Execute actions when the stream info are updated"
			},
			"FIRST_ALL_TIME": {
				"label": "First message of a user all time",
				"description": "Execute actions when a user sends a message for the first time on your channel"
			},
			"FIRST_TODAY": {
				"label": "First message of a user today",
				"description": "Execute actions when a user sends a message for the first time today"
			},
			"RETURNING_USER": {
				"label": "Returning user",
				"description": "Execute actions when a user comes back after chatting at least twice in the last 30 days.<br>(ceci n'existe peut-être plus sur Twitch)"
			},
			"PRESENTATION": {
				"label": "User presentation",
				"description": "Execute actions when a user sends a presentation message."
			},
			"FOLLOW": {
				"label": "Follow",
				"description": "Execute actions when someone follows the channel"
			},
			"RAID": {
				"label": "Raid received",
				"description": "Execute actions when someone raids the channel"
			},
			"SHOUTOUT_OUT": {
				"label": "Shoutout given",
				"description": "Execute actions when giving a shoutout to someone"
			},
			"SHOUTOUT_IN": {
				"label": "Shoutout received",
				"description": "Execute actions when given a shoutout on another channel"
			},
			"POLL_RESULT": {
				"label": "Poll result",
				"description": "Execute actions when a poll completes"
			},
			"PREDICTION_RESULT": {
				"label": "Prediction result",
				"description": "Execute actions when a prediction completes"
			},
			"RAFFLE_RESULT": {
				"label": "Raffle result",
				"description": "Execute actions when a raffle completes"
			},
			"BINGO_RESULT": {
				"label": "Bingo result",
				"description": "Execute actions when a bingo completes"
			},
			"SUB": {
				"label": "Sub",
				"description": "Execute actions when someone subscribes to the channel"
			},
			"SUBGIFT": {
				"label": "Subgift",
				"description": "Execute actions when someones subgifts someone else"
			},
			"CHEER": {
				"label": "Bits",
				"description": "Execute actions when someone sends bits"
			},
			"HYPE_TRAIN_APPROACHING": {
				"label": "Hype train approach",
				"description": "Execute actions when a hype train approaches"
			},
			"HYPE_TRAIN_START": {
				"label": "Hype train start",
				"description": "Execute actions when a hype train starts"
			},
			"HYPE_TRAIN_PROGRESS": {
				"label": "Hype train progress",
				"description": "Execute actions when a hype train progresses"
			},
			"HYPE_TRAIN_END": {
				"label": "Hype train end",
				"description": "Execute actions when a hype train ends"
			},
			"HYPE_TRAIN_CANCELED": {
				"label": "Hype train canceled",
				"description": "Execute actions when a hype train fails"
			},
			"HYPE_TRAIN_COOLDOWN": {
				"label": "Hype train cooldown",
				"description": "Execute actions when a hype train can, be started again"
			},
			"TIMEOUT": {
				"label": "User timed out",
				"description": "Execute actions when a user is <mark>/timeout</mark>"
			},
			"BAN": {
				"label": "User banned",
				"description": "Execute actions when a user is <mark>/ban</mark>"
			},
			"UNBAN": {
				"label": "User unbanned",
				"description": "Execute actions when a user is <mark>/unban</mark>"
			},
			"VIP": {
				"label": "User /vip",
				"description": "Execute actions when a user is added to your VIPs"
			},
			"UNVIP": {
				"label": "User /unvip",
				"description": "Execute actions when a user is removed from your VIPs<br><i>(only works when using <mark>/unvip</mark> command from twitchat</i>"
			},
			"MOD": {
				"label": "User /mod",
				"description": "Execute actions when a user is added to your mods"
			},
			"UNMOD": {
				"label": "User /unmod",
				"description": "Execute actions when a user is removed from your mods<br><i>(only works when using <mark>/unmod</mark> command from twitchat</i>"
			},
			"SHIELD_MODE_ON": {
				"label": "Shield mode enabled",
				"description": "Execute actions when shield mode is enabled"
			},
			"SHIELD_MODE_OFF": {
				"label": "Shield mode disabled",
				"description": "Execute actions when shield mode is disabled"
			},
			"PIN_MESSAGE": {
				"label": "Pin message",
				"description": "Execute actions when pinning a message"
			},
			"UNPIN_MESSAGE": {
				"label": "Unpin message",
				"description": "Execute actions when unpinning a message"
			},
			"TRACK_ADDED_TO_QUEUE": {
				"label": "Track added to queue",
				"description": "Execute actions when a music is added to the queue"
			},
			"MUSIC_START": {
				"label": "Music starts playing",
				"description": "Execute actions when a music starts playing"
			},
			"MUSIC_STOP": {
				"label": "Music stops playing",
				"description": "Execute actions when a music stops playing"
			},
			"SCHEDULE": {
				"label": "Scheduled actions",
				"description": "Execute actions regularly or at specific date/time"
			},
			"TIMER_START": {
				"label": "Timer start",
				"description": "Execute actions when a timer is started with the command <mark>/timerStart</mark>"
			},
			"TIMER_STOP": {
				"label": "Timer stop",
				"description": "Execute actions when a timer is stoped with the command <mark>/timerStop</mark>"
			},
			"COUNTDOWN_START": {
				"label": "Countdown start",
				"description": "Execute actions when a countdown is started with the command <mark>/countdown</mark>"
			},
			"COUNTDOWN_STOP": {
				"label": "Countdown stop",
				"description": "Execute actions when a countdown completes or is stoped"
			},
			"SHOUTOUT": {
				"label": "Shoutout (Twitchat)",
				"description": "Execute actions when doing a shoutout via <mark>/so</mark> command or shoutout button"
			},
			"EMERGENCY_MODE_START": {
				"label": "Emergency start",
				"description": "Execute actions when enabling the emergency mode"
			},
			"EMERGENCY_MODE_STOP": {
				"label": "Emergency stop",
				"description": "Execute actions when stopping the emergency mode"
			},
			"HIGHLIGHT_CHAT_MESSAGE": {
				"label": "Highlighted message",
				"description": "Execute actions when requesting to highlight a message"
			},
			"CHAT_ALERT": {
				"label": "Chat alert",
				"description": "Execute actions when the Chat Alert feature is triggered<br><i>(Parameters => @:params.categories.features => @:params.alertMode)</i>"
			},
			"VOICEMOD": {
				"label": "Voicemod - voice changed",
				"description": "Execute actions when changing the voice effect on voicemod"
			},
			"OBS_SCENE": {
				"label": "Switch to scene",
				"description": "Execute actions when switching to <mark>{'{'}SUB_ITEM_NAME{'}'}</mark> OBS scene"
			},
			"OBS_SOURCE_ON": {
				"label": "Source show",
				"description": "Execute actions when showing <mark>{'{'}SUB_ITEM_NAME{'}'}</mark> OBS source"
			},
			"OBS_SOURCE_OFF": {
				"label": "Source hide",
				"description": "Execute actions when hiding <mark>{'{'}SUB_ITEM_NAME{'}'}</mark> OBS source"
			},
			"STREAM_ONLINE": {
				"label": "Stream start",
				"description": "Execute actions when stream starts<br><i>(you might have to wait +1min before receiving that info)</i>"
			},
			"STREAM_OFFLINE": {
				"label": "Stream stop",
				"description": "Execute actions when stream stops<br><i>(you might have to wait +1min before receiving that info)</i>"
			},
			"COUNTER_ADD": {
				"label": "Value added to a counter",
				"description": "Execute actions when adding a value to a counter"
			},
			"COUNTER_DEL": {
				"label": "Value removed from a counter",
				"description": "Execute actions when removing a value from a counter"
			},
			"COUNTER_MAXED": {
				"label": "Max value reached",
				"description": "Execute actions when counter's value reaches max value"
			},
			"COUNTER_MINED": {
				"label": "Min value reached",
				"description": "Execute actions when counter's value reaches min value"
			},
			"COUNTER_LOOPED": {
				"label": "Value looped",
				"description": "Execute actions when counter's value looped<br><i>(if \"loop\" option is enabled and value reaches max, value will switch to min and vice versa)</i>"
			},
			"RAID_STARTED": {
				"label": "Started a raid",
				"description": "Execute actions when starting a raid to another channel"
			}
		},
		"musicEvents": {
			"ADD_TRACK_TO_QUEUE": "Add a track to the queue",
			"NEXT_TRACK": "Play next track",
			"PAUSE_PLAYBACK": "Pause playback",
			"RESUME_PLAYBACK": "Resume playback",
			"START_PLAYLIST": "Start playlist"
		},
		"scheduleEvents": {
			"REGULAR_REPEAT": "Regular repeat",
			"SPECIFIC_DATES": "Specific dates"
		}
	}
}